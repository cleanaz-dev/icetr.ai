// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  country         String
  users           User[]
  campaigns       Campaign[]
  apiKeys         ApiKey[]
  teams           Team[]
  leads           Lead[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdBy       String          @unique
  orgIntegrations OrgIntegration?
  auditLogs       AuditLog[]
}

model OrgIntegration {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String       @unique @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Shared across all
  webhookUrl String?

  // Relations to service integrations
  twilio   TwilioIntegration?
  calendly CalendlyIntegration?
  zoom     ZoomIntegration?
  make     MakeIntegration?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TwilioIntegration {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orgIntegrationId String         @unique @db.ObjectId
  orgIntegration   OrgIntegration @relation(fields: [orgIntegrationId], references: [id], onDelete: Cascade)
  enabled          Boolean        @default(false)
  accountSid       String
  authToken        String
  apiKey           String?
  apiSecret        String?
  appSid           String?
  phoneNumbers     String[]
  voiceUrl         String?
  smsUrl           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CalendlyIntegration {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orgIntegrationId String         @unique @db.ObjectId
  orgIntegration   OrgIntegration @relation(fields: [orgIntegrationId], references: [id], onDelete: Cascade)
  enabled          Boolean        @default(false)
  apiKey           String
  orgUri           String?
  webhookUrl       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ZoomIntegration {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orgIntegrationId String         @unique @db.ObjectId
  orgIntegration   OrgIntegration @relation(fields: [orgIntegrationId], references: [id])
  enabled          Boolean        @default(false)
  clientId         String
  clientSecretKms  String
  accountId        String?
  webhookSecretKms String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MakeIntegration {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orgIntegrationId String         @unique @db.ObjectId
  orgIntegration   OrgIntegration @relation(fields: [orgIntegrationId], references: [id], onDelete: Cascade)
  enabled          Boolean        @default(false)
  apiKeyKms        String
  webhookUrl       String?
  scenarioId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String  @db.ObjectId
  userId         String? @db.ObjectId // Nullable for system actions

  // Action details
  action     String // 'create', 'update', 'delete', 'test', 'view', 'export'
  resource   String // 'integration', 'user', 'setting', 'api_key'
  resourceId String? // ID of the specific resource
  service    String? // 'twilio', 'calendly', 'makeZoom' (for integrations)

  // Request context
  ipAddress String?
  userAgent String?
  endpoint  String? // API endpoint called
  method    String? // HTTP method

  // Results
  success      Boolean @default(true)
  errorCode    String?
  errorMessage String?

  // Additional context
  metadata Json? // Flexible field for extra data

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes for performance
  @@index([organizationId, createdAt])
  @@index([organizationId, action, resource])
  @@index([organizationId, userId])
  @@index([createdAt]) // For cleanup/archival
  @@map("auditLogs")
}

model ApiKey {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  key         String       @unique // hashed version
  plainKey    String?
  name        String
  description String?
  orgId       String       @db.ObjectId
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  campaignIds String[]     @default([]) @db.ObjectId
  campaigns   Campaign[]   @relation("CampaignApiKeys", fields: [campaignIds], references: [id])
  scopes      String[]     @default([]) // ["lead:create", "campaign:read", "analytics:view"]
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([orgId])
  @@index([expiresAt])
  @@index([isActive])
}

model Team {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  orgId        String       @db.ObjectId
  organization Organization @relation(fields: [orgId], references: [id])
  campaigns    Campaign[]
  managerId    String?      @db.ObjectId
  manager      User?        @relation("TeamManager", fields: [managerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  members      TeamMember[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TeamMember {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  teamId    String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teamRole  TeamRole? @default(MEMBER)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum TeamRole {
  JUNIOR
  MEMBER
  SENIOR
  LEAD
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  email             String             @unique
  clerkId           String             @unique
  firstname         String
  lastname          String
  role              Role               @default(Agent)
  imageUrl          String
  orgId             String             @db.ObjectId
  organization      Organization       @relation(fields: [orgId], references: [id])
  assignedLeads     Lead[]
  activities        LeadActivity[]
  userSettings      UserSettings?
  uploadedDocuments CampaignDocument[] @relation("UploadedDocuments")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  callSessions      CallSession[]
  Call              Call[]
  Training          Training[]
  Notification      Notification[]
  reviewedTrainings ReviewTraining[]   @relation("TrainingReviewer")

  managedTeams    Team[]       @relation("TeamManager")
  teamMemberships TeamMember[]
  auditLogs       AuditLog[]
}

model UserSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  language  String   @default("en-US")
  timezone  String   @default("America/New_York")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Campaign {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  orgId              String              @db.ObjectId
  organization       Organization        @relation(fields: [orgId], references: [id])
  assignmentStrategy AssignmentStrategy? @default(MANUAL)
  apiKeyIds          String[]            @default([]) @db.ObjectId
  apiKeys            ApiKey[]            @relation("CampaignApiKeys", fields: [apiKeyIds], references: [id])
  teamId             String?             @db.ObjectId
  team               Team?               @relation(fields: [teamId], references: [id])
  type               CampaignType        @default(CALLS)
  status             Status              @default(Draft)
  leads              Lead[]
  documents          CampaignDocument[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  callSessions       CallSession[]

  @@index([orgId])
  @@index([teamId])
  @@index([status])
}

enum CampaignType {
  CALLS
  FORMS
  INBOUND
}

model Lead {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  campaignId     String?        @db.ObjectId
  campaign       Campaign?      @relation(fields: [campaignId], references: [id])
  assignedUserId String?        @db.ObjectId
  assignedUser   User?          @relation(fields: [assignedUserId], references: [id])
  name           String?
  phoneNumber    String
  email          String?
  company        String?
  status         LeadStatus     @default(New)
  source         String?
  metadata       Json?
  industry       String?
  website        String?
  country        String?
  region         String?
  activities     LeadActivity[]
  followUps      FollowUp[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Call           Call[]
  Prospect       Prospect[]
  Organization   Organization?  @relation(fields: [organizationId], references: [id])
  organizationId String?        @db.ObjectId
}

model LeadActivity {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  leadId           String       @db.ObjectId
  lead             Lead         @relation(fields: [leadId], references: [id])
  type             ActivityType
  content          String? // message or description
  duration         Int? // call duration in seconds (for calls)
  outcome          CallOutcome? // only for call activities
  timestamp        DateTime     @default(now())
  callSid          String?
  callAttemptCount Int?
  createdBy        String       @db.ObjectId
  createdUser      User         @relation(fields: [createdBy], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  callSession   CallSession? @relation(fields: [callSessionId], references: [id])
  callSessionId String?      @db.ObjectId
  call          Call?        @relation(fields: [callId], references: [id])
  callId        String?      @db.ObjectId
}

model Call {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  callSid       String      @unique // Twilio SID
  leadId        String      @db.ObjectId
  lead          Lead        @relation(fields: [leadId], references: [id])
  callSessionId String      @db.ObjectId
  callSession   CallSession @relation(fields: [callSessionId], references: [id])

  // Call details
  direction String? // "inbound" | "outbound"
  from      String? // phone number
  to        String? // phone number
  status    String? // "initiated" | "ringing" | "answered" | "completed"
  outcome   CallOutcome?

  // Timing
  startTime DateTime?
  endTime   DateTime?
  duration  Int? // seconds

  // Media
  recordingUrl  String?
  transcription String?

  // Metadata
  notes       String?
  createdBy   String   @db.ObjectId
  createdUser User     @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  activities LeadActivity[] // All activities related to this call
  followUps  FollowUp[] // Follow-ups created from this call
}

model CallSession {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  campaignId String?   @db.ObjectId // Optional: session might span campaigns
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  // Quick stats (could be computed, but storing for performance)
  totalCalls      Int @default(0)
  successfulCalls Int @default(0)
  totalDuration   Int @default(0) // in seconds

  // Relations
  activities LeadActivity[] // Link activities to sessions

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Call      Call[]
}

model FollowUp {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  leadId        String         @db.ObjectId
  lead          Lead           @relation(fields: [leadId], references: [id])
  dueDate       DateTime?
  type          String // "call" or "email"
  reason        String // "busy", "scheduled_callback", etc.
  completed     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  callSid       String?        @unique
  to            String?
  from          String?
  recordingUrl  String?
  transcription String?
  call          Call?          @relation(fields: [callId], references: [id])
  callId        String?        @db.ObjectId
  Notification  Notification[]
}

model WaitList {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String @unique
  notes String
}

model Notification {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  userId     String             @db.ObjectId
  user       User               @relation(fields: [userId], references: [id])
  title      String?
  type       String // "follow_up_due", "follow_up_overdue", etc.
  status     NotificationStatus @default(pending) // "pending", "read", "dismissed"
  message    String? // Optional custom message
  followUpId String?            @db.ObjectId // Link to the follow-up
  followUp   FollowUp?          @relation(fields: [followUpId], references: [id])
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
}

model Prospect {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  callSid       String
  name          String? // extracted from voicemail or provided
  phoneNumber   String?
  email         String?
  company       String? // if they mention it
  source        String? // "inbound_call", "contact_form", "email", etc.
  recordingUrl  String? // for voicemail recordings
  transcription String? // transcribed voicemail content
  notes         String? // any additional context
  status        ProspectStatus @default(New) // New, Contacted, Qualified, Converted, etc.

  // Conversion tracking  
  convertedToLeadId String? @db.ObjectId
  convertedToLead   Lead?   @relation(fields: [convertedToLeadId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProspectStatus {
  New
  Contacted
  Qualified
  Converted
  Unqualified
}

model CampaignDocument {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId         String   @db.ObjectId
  name               String // Original filename
  type               String // pdf, docx, txt, etc.
  category           String // script, training, reference, etc.
  description        String? // Optional description
  fileUrl            String // URL to stored file (Cloudinary/S3)
  fileSize           Int // Size in bytes
  mimeType           String // application/pdf, text/plain, etc.
  cloudinaryPublicId String?
  campaign           Campaign @relation(fields: [campaignId], references: [id])
  uploadedBy         String   @db.ObjectId
  uploader           User     @relation("UploadedDocuments", fields: [uploadedBy], references: [id])
  createdAt          DateTime @default(now())
}

model Training {
  id                        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String       @db.ObjectId
  user                      User         @relation(fields: [userId], references: [id])
  type                      TrainingType @default(CALLS)
  rapportBuilt              Boolean?
  objectionHandled          Boolean?
  bookedMeeting             Boolean?
  valuePropositionDelivered Boolean?
  // individual scores
  introQualityScore         String?
  discoveryScore            String?
  rapportScore              String?
  objectionScore            String?
  closingScore              String?
  closingCoach              String?
  overallScore              String?
  numericalGrade            Float?

  scenario          String?
  recordingUrl      String?
  transcript        String?
  transcriptSummary String?
  improvements      String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  ReviewTraining    ReviewTraining[]
}

model ReviewTraining {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  trainingId String   @db.ObjectId
  training   Training @relation(fields: [trainingId], references: [id])

  reviewerId String @db.ObjectId
  reviewer   User   @relation("TrainingReviewer", fields: [reviewerId], references: [id])

  score       Int // 1-100
  reviewNotes String?

  createdAt DateTime @default(now())
}

enum NotificationStatus {
  pending
  read
  snooze
}

enum TrainingType {
  CALLS
  REVIEW
}

enum ActivityType {
  CALL
  VOICEMAIL
  SMS
  EMAIL
  NOTE
  MEETING
  FOLLOW_UP
  ASSIGNMENT
  MISSED_CALL
  OUTBOUND_CALL
  CONTACT_ATTEMPTS
  CONTACTED
  FOLLOW_UP_COMPLETED
  EMAIL_SENT
}

enum CallOutcome {
  ANSWERED
  VOICEMAIL
  BUSY
  NO_ANSWER
  DISCONNECTED
  INVALID_NUMBER
  DO_NOT_CALL
  NOT_INTERESTED
  INTERESTED
  MEETING_SCHEDULED
  CALLBACK
}

enum LeadStatus {
  New
  Contacted
  Qualified
  Proposal
  Lost
  Won
}

enum Role {
  Admin
  Manager
  Agent
  TeamAdmin
  OrgAdmin
  SuperAdmin
}

enum Status {
  Draft
  Active
  Paused
  Completed
  Cancelled
}

enum AssignmentStrategy {
  ROUND_ROBIN
  LEAST_LOADED
  ROLE_BASED
  MANUAL
}
