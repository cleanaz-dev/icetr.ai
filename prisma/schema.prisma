// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  onboardingCompleted   Boolean                @default(false)
  country               String?
  users                 User[]                 @relation("UserOrganization")
  campaigns             Campaign[]
  apiKeys               ApiKey[]
  teams                 Team[]
  leads                 Lead[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  ownerId               String?                @unique @db.ObjectId
  owner                 User?                  @relation("OrgOwner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orgIntegrations       OrgIntegration?
  auditLogs             AuditLog[]
  customer              Customer?
  customerId            String?                @db.ObjectId
  callFlowConfiguration CallFlowConfiguration?
  tierSettings          TierSettings?
  call                  Call[]                 @relation("CallOrganization")
  researchConfig        ResearchConfig[]
  phoneNumbers          PhoneNumber[]
  callSessions          CallSession[]
  aiAgentSettings       AIAgent?
}

model AIAgent {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  orgId        String?       @unique @db.ObjectId
  organization Organization? @relation(fields: [orgId], references: [id])

  agentIstructions Json?
  webhookUrl       String?

  resource          Json? // Full resource object
  service           Json? // Full service object  
  location          Json? // Full location object
  recurringSchedule Json? // Full recurring schedule object
  scheduleBlocks    Json? // Full schedule blocks object

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhoneNumber {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber  String
  countryCode  String?
  orgId        String?       @db.ObjectId
  organization Organization? @relation(fields: [orgId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Customer {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  organization Organization? @relation(fields: [orgId], references: [id])
  orgId        String?       @unique @db.ObjectId
  stripeCusId  String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User?
  userId       String?       @unique @db.ObjectId

  subscription Subscription?
  invoices     Invoice[]

  billingEmail    String? // For receipts
  taxId           String? // For tax compliance
  paymentMethod   Json? // Card, ACH, etc.
  invoiceSettings Json? // Custom invoice settings
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  email             String             @unique
  clerkId           String?            @unique
  firstname         String?
  lastname          String?
  fullname          String
  role              Role?              @relation(fields: [roleId], references: [id])
  roleId            String?            @db.ObjectId
  imageUrl          String?
  orgId             String?            @db.ObjectId
  organization      Organization?      @relation("UserOrganization", fields: [orgId], references: [id], onDelete: NoAction)
  assignedLeads     Lead[]
  activities        LeadActivity[]
  userSettings      UserSettings?
  uploadedDocuments CampaignDocument[] @relation("UploadedDocuments")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  callSessions      CallSession[]
  call              Call[]
  trainings         Training[]
  notifications     Notification[]
  reviews           CallReview[]
  orgOwner          Organization?      @relation("OrgOwner")
  managedTeams      Team[]             @relation("TeamManager")
  teamMemberships   TeamMember[]
  auditLogs         AuditLog[]
  trainingSessions  TrainingSession[]
  bookings          Booking[]
  broadcast         Broadcast[]
  customerId        String?            @unique @db.ObjectId
  customer          Customer?          @relation(fields: [customerId], references: [id])
}

model TierSettings {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  organization Organization?    @relation(fields: [orgId], references: [id])
  orgId        String?          @unique @db.ObjectId
  tier         SubscriptionTier @default(STARTER)
  limits       Json // All limits in one place
  features     Json // All feature flags in one place
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model UserSettings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  language  String   @default("en-US")
  timezone  String   @default("America/New_York")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  stripeSubId String   @unique
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String   @unique @db.ObjectId

  // Product/Price Info
  priceId   String
  productId String
  price     Float?
  quantity  Int?   @default(1)

  // Tier tracking
  tier               SubscriptionTier   @default(STARTER)
  subcriptionAddOn   SubscriptionAddOn? @relation(fields: [subcriptionAddOnId], references: [id])
  subcriptionAddOnId String?            @unique @db.ObjectId

  // Status tracking
  status            SubscriptionStatus
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean            @default(false)

  trialStart DateTime?
  trialEnd   DateTime?

  // Usage tracking
  usageRecords UsageRecord[]

  // Billing cycle preferences
  billingCycle BillingCycle @default(MONTHLY)

  // Metadata
  metadata Json?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

model AddOn {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  subscriptionAddOn   SubscriptionAddOn? @relation(fields: [subscriptionAddOnId], references: [id])
  subscriptionAddOnId String?            @db.ObjectId
  title               String
  units               Int
  unitsConsumed       Int                @default(0)
  type                AddOnType
  amount              Float
  priceId             String             @unique
  currency            String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model SubscriptionAddOn {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  subscription   Subscription?
  subscriptionId String?       @unique @db.ObjectId

  addOns AddOn[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AddOnType {
  DFY_STARTER
  DFY_PROFESSIONAL
  DFY_ENTERPRISE
  EXTRA_USERS
  EXTRA_TRANSCRIPTION_MINUTES
  PREMIUM_SUPPORT
  AI_CREDITS
}

enum BillingCycle {
  MONTHLY
  ANNUAL
}

model UsageRecord {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String       @db.ObjectId

  usageType UsageType
  quantity  Int
  timestamp DateTime  @default(now())

  // For aggregation
  billingPeriod String // "2025-01" format

  createdAt DateTime @default(now())
}

enum UsageType {
  TRANSCRIPTION_MINUTES
  WEBHOOK_CALLS
  API_CALLS
  LEADS_PROCESSED
  TRAINING_SESSIONS
}

model Invoice {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  stripeInvId String    @unique
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String    @db.ObjectId
  amountDue   Int // in cents
  amountPaid  Int // in cents
  currency    String
  status      String // draft, open, paid, void, uncollectible
  pdfUrl      String? // Link to downloadable invoice
  hostedUrl   String? // Payable invoice URL
  createdAt   DateTime  @default(now())
  paidAt      DateTime?
}

model OrgIntegration {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  orgId        String       @unique @db.ObjectId
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Shared across all
  webhookUrl String?

  // Relations to service integrations
  twilio   TwilioIntegration?
  calendly CalendlyIntegration?
  zoom     ZoomIntegration?
  make     MakeIntegration?
  blandAi  BlandAiIntegration?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TwilioIntegration {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orgIntegrationId String         @unique @db.ObjectId
  orgIntegration   OrgIntegration @relation(fields: [orgIntegrationId], references: [id], onDelete: Cascade)
  enabled          Boolean        @default(false)
  accountSid       String?
  authToken        String?
  apiKey           String?
  apiSecret        String?
  appSid           String?
  phoneNumbers     String[]
  voiceUrl         String?
  smsUrl           String?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  publicFields PublicField[]
}

model BlandAiIntegration {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orgIntegrationId String         @unique @db.ObjectId
  orgIntegration   OrgIntegration @relation(fields: [orgIntegrationId], references: [id], onDelete: Cascade)
  enabled          Boolean        @default(false)

  // Core Bland AI credentials
  apiKey     String?
  webhookUrl String?

  // Phone numbers for calls
  phoneNumbers String[]

  // Bland AI specific settings
  voiceId         String[] // Default voice ID
  maxCallDuration Int? // Max call length in seconds
  recordCalls     Boolean  @default(true)
  transferNumbers String[] @default([]) // Numbers to transfer to

  // AI behavior settings
  temperature Float?  @default(0.7) // AI creativity level
  model       String? @default("enhanced") // Bland AI model type

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  publicFields PublicField[]
}

model PublicField {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  fieldName String

  calendlyIntegrationId String?              @db.ObjectId
  calendlyIntegration   CalendlyIntegration? @relation(fields: [calendlyIntegrationId], references: [id])

  blandAiIntegrationId String?             @db.ObjectId
  blandAiIntegration   BlandAiIntegration? @relation(fields: [blandAiIntegrationId], references: [id])

  twilioIntegrationId String?            @db.ObjectId
  twilioIntegration   TwilioIntegration? @relation(fields: [twilioIntegrationId], references: [id])
}

model CalendlyIntegration {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orgIntegrationId String         @unique @db.ObjectId
  orgIntegration   OrgIntegration @relation(fields: [orgIntegrationId], references: [id], onDelete: Cascade)
  enabled          Boolean        @default(false)
  apiKey           String?
  orgUri           String?
  webhookUrl       String?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  publicFields PublicField[]
}

model ZoomIntegration {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orgIntegrationId String         @unique @db.ObjectId
  orgIntegration   OrgIntegration @relation(fields: [orgIntegrationId], references: [id])
  enabled          Boolean        @default(false)
  clientId         String?
  clientSecretKms  String?
  accountId        String?
  webhookSecretKms String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MakeIntegration {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  orgIntegrationId String         @unique @db.ObjectId
  orgIntegration   OrgIntegration @relation(fields: [orgIntegrationId], references: [id], onDelete: Cascade)
  enabled          Boolean        @default(false)
  apiKeyKms        String?
  webhookUrl       String?
  scenarioId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  orgId  String  @db.ObjectId
  userId String? @db.ObjectId // Nullable for system actions

  // Action details
  action     String // 'create', 'update', 'delete', 'test', 'view', 'export'
  resource   String // 'integration', 'user', 'setting', 'api_key'
  resourceId String? // ID of the specific resource
  service    String? // 'twilio', 'calendly', 'makeZoom' (for integrations)

  // Request context
  ipAddress String?
  userAgent String?
  endpoint  String? // API endpoint called
  method    String? // HTTP method

  // Results
  success      Boolean @default(true)
  errorCode    String?
  errorMessage String?

  // Additional context
  metadata Json? // Flexible field for extra data

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime

  // Relations
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user         User?        @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Indexes for performance
  @@index([orgId, createdAt])
  @@index([orgId, action, resource])
  @@index([orgId, userId])
  @@index([createdAt]) // For cleanup/archival
  @@map("auditLogs")
}

model ApiKey {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  key          String       @unique // hashed version
  plainKey     String?
  name         String
  description  String?
  orgId        String       @db.ObjectId
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  campaignIds  String[]     @default([]) @db.ObjectId
  campaigns    Campaign[]   @relation("CampaignApiKeys", fields: [campaignIds], references: [id])
  scopes       String[]     @default([]) // ["lead:create", "campaign:read", "analytics:view"]
  lastUsedAt   DateTime?
  expiresAt    DateTime?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([orgId])
  @@index([expiresAt])
  @@index([isActive])
}

model Team {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  orgId        String       @db.ObjectId
  organization Organization @relation(fields: [orgId], references: [id])
  campaigns    Campaign[]
  managerId    String?      @db.ObjectId
  manager      User?        @relation("TeamManager", fields: [managerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  members      TeamMember[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  broadcasts   Broadcast[]  @relation(fields: [broadcastId], references: [id])
  broadcastId  String[]     @db.ObjectId
}

model TeamMember {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  teamId    String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teamRole  TeamRole? @default(MEMBER)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum TeamRole {
  MEMBER
  MANAGER
  SENIOR
  LEAD
}

model Role {
  id    String   @id @default(auto()) @map("_id") @db.ObjectId
  type  RoleType @default(Agent)
  users User[]

  permissionIDs String[]     @db.ObjectId
  permissions   Permission[] @relation(fields: [permissionIDs], references: [id])
}

model Permission {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  roleIDs String[] @db.ObjectId
  roles   Role[]   @relation(fields: [roleIDs], references: [id])
}

model Campaign {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  orgId              String              @db.ObjectId
  organization       Organization        @relation(fields: [orgId], references: [id])
  assignmentStrategy AssignmentStrategy? @default(MANUAL)
  apiKeyIds          String[]            @default([]) @db.ObjectId
  apiKeys            ApiKey[]            @relation("CampaignApiKeys", fields: [apiKeyIds], references: [id])
  teamId             String?             @db.ObjectId
  team               Team?               @relation(fields: [teamId], references: [id])
  type               CampaignType        @default(CALLS)
  status             Status              @default(Draft)
  leads              Lead[]
  documents          CampaignDocument[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  callSessions       CallSession[]
  training           CampaignTraining[]
  scripts            Json?
  bookings           Booking[]
  researchConfig     ResearchConfig?

  @@index([orgId])
  @@index([teamId])
  @@index([status])
}

enum CampaignType {
  CALLS
  FORMS
  INBOUND
}

model CampaignTraining {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String   @db.ObjectId

  // Content
  scenarios        TrainingScenario[]
  webhookUrl       String? // For call events
  trainingSessions TrainingSession[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model TrainingScenario {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  training   CampaignTraining @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  trainingId String           @db.ObjectId

  scripts        Json?
  title          String?
  level          String?
  description    String?
  objectives     String?
  targetAudience String?
  keyPoints      Json?
  imageUrl       String?

  voiceId String?
  prompt  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Research {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  leadId    String   @unique @db.ObjectId
  research  Json?
  lead      Lead     @relation(fields: [leadId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResearchConfig {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  orgId          String           @db.ObjectId
  campaignId     String           @unique @db.ObjectId
  services       String[]
  techStackFocus TechStackFocus[]
  isPremium      Boolean          @default(false)
  socials        SocialPlatform[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  organization Organization? @relation(fields: [orgId], references: [id])
  campaign     Campaign?     @relation(fields: [campaignId], references: [id])
}

enum TechStackFocus {
  CRM
  LIVE_CHAT
  ANALYTICS
  ECOMMERCE
  EMAIL_MARKETING
  AUTOMATION
  PAYMENT_PROCESSING
  CUSTOMER_SUPPORT
  LEAD_GENERATION
  SOCIAL_MEDIA_TOOLS
}

enum SocialPlatform {
  LINKEDIN
  FACEBOOK
  INSTAGRAM
  TIKTOK
  TWITTER
  YOUTUBE
  PINTEREST
}

model Lead {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  campaignId     String?        @db.ObjectId
  campaign       Campaign?      @relation(fields: [campaignId], references: [id])
  assignedUserId String?        @db.ObjectId
  assignedUser   User?          @relation(fields: [assignedUserId], references: [id])
  name           String?
  phoneNumber    String
  email          String?
  company        String?
  status         LeadStatus     @default(New)
  source         String?
  metadata       Json?
  industry       String?
  website        String?
  country        String?
  region         String?
  activities     LeadActivity[]
  followUps      FollowUp[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  call           Call[]
  Prospect       Prospect[]
  organization   Organization?  @relation(fields: [orgId], references: [id])
  orgId          String?        @db.ObjectId
  bookings       Booking[]
  research       Research?
}

model LeadActivity {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  leadId           String       @db.ObjectId
  lead             Lead         @relation(fields: [leadId], references: [id])
  type             ActivityType
  content          String? // message or description
  duration         Int? // call duration in seconds (for calls)
  outcome          CallOutcome? // only for call activities
  timestamp        DateTime     @default(now())
  callSid          String?
  callAttemptCount Int?
  createdBy        String       @db.ObjectId
  createdUser      User         @relation(fields: [createdBy], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  callSession   CallSession? @relation(fields: [callSessionId], references: [id])
  callSessionId String?      @db.ObjectId
  call          Call?        @relation(fields: [callId], references: [id])
  callId        String?      @db.ObjectId
}

model Booking {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  leadId         String        @db.ObjectId
  lead           Lead          @relation(fields: [leadId], references: [id], onDelete: Cascade)
  campaignId     String?       @db.ObjectId
  campaign       Campaign?     @relation(fields: [campaignId], references: [id])
  bookedBy       String?       @db.ObjectId
  bookedByAi     Boolean?      @default(false)
  user           User?         @relation(fields: [bookedBy], references: [id])
  hapioBookingId String?       @unique
  bookingData    Json // Meeting details, calendar info, etc.
  status         BookingStatus @default(SCHEDULED) // SCHEDULED, COMPLETED, CANCELLED, RESCHEDULED
  scheduledAt    DateTime // When the meeting is scheduled for
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  zoomUrl        String?
}

enum BookingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
  NO_SHOW
}

model Call {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  callSid       String       @unique // Twilio SID
  leadId        String       @db.ObjectId
  lead          Lead         @relation(fields: [leadId], references: [id])
  callSessionId String       @db.ObjectId
  callSession   CallSession  @relation(fields: [callSessionId], references: [id])
  organization  Organization @relation("CallOrganization", fields: [orgId], references: [id])
  orgId         String       @db.ObjectId

  // Call details
  direction String? // "inbound" | "outbound"
  from      String? // phone number
  to        String? // phone number
  status    String? // "initiated" | "ringing" | "answered" | "completed"
  outcome   CallOutcome?

  // Timing
  startTime DateTime?
  endTime   DateTime?
  duration  Int? // seconds

  // Media
  recordingUrl  String?
  transcription String?

  // Metadata
  notes       String?
  createdBy   String   @db.ObjectId
  createdUser User     @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  activities LeadActivity[] // All activities related to this call
  followUps  FollowUp[] // Follow-ups created from this call
  callReview CallReview[]

  @@index([orgId])
}

model CallSession {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  campaignId String?   @db.ObjectId // Optional: session might span campaigns
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  orgId        String?       @db.ObjectId
  organization Organization? @relation(fields: [orgId], references: [id])

  // Quick stats (could be computed, but storing for performance)
  totalCalls      Int @default(0)
  successfulCalls Int @default(0)
  totalDuration   Int @default(0) // in seconds

  // Relations
  activities LeadActivity[] // Link activities to sessions

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  call       Call[]
  callReview CallReview[]
}

model FollowUp {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  leadId        String         @db.ObjectId
  lead          Lead           @relation(fields: [leadId], references: [id])
  dueDate       DateTime?
  type          String // "call" or "email"
  reason        String // "busy", "scheduled_callback", etc.
  completed     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  callSid       String?        @unique
  to            String?
  from          String?
  recordingUrl  String?
  transcription String?
  call          Call?          @relation(fields: [callId], references: [id])
  callId        String?        @db.ObjectId
  Notification  Notification[]
}

model WaitList {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  email String @unique
  notes String
}

model Notification {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  userId        String             @db.ObjectId
  user          User               @relation(fields: [userId], references: [id])
  title         String?
  type          String // "follow_up_due", "follow_up_overdue", etc.
  status        NotificationStatus @default(pending) // "pending", "read", "dismissed"
  message       String? // Optional custom message
  followUpId    String?            @db.ObjectId // Link to the follow-up
  followUp      FollowUp?          @relation(fields: [followUpId], references: [id])
  broadcastId   String?            @db.ObjectId // Just add this
  broadcast     Broadcast?         @relation(fields: [broadcastId], references: [id])
  broadcastType BroadcastType?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Broadcast {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  message       String?
  archive       Boolean        @default(false)
  type          BroadcastType
  views         Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  teams         Team[]         @relation(fields: [teamId], references: [id])
  teamId        String[]       @db.ObjectId
  createdBy     String?        @db.ObjectId
  createdUser   User?          @relation(fields: [createdBy], references: [id])
  notifications Notification[]
}

enum BroadcastType {
  GENERAL
  ANNOUNCEMENT
  TRAINING
  SYSTEM
  ALERT
}

model Prospect {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  callSid       String
  name          String? // extracted from voicemail or provided
  phoneNumber   String?
  email         String?
  company       String? // if they mention it
  source        String? // "inbound_call", "contact_form", "email", etc.
  recordingUrl  String? // for voicemail recordings
  transcription String? // transcribed voicemail content
  notes         String? // any additional context
  status        ProspectStatus @default(New) // New, Contacted, Qualified, Converted, etc.

  // Conversion tracking  
  convertedToLeadId String? @db.ObjectId
  convertedToLead   Lead?   @relation(fields: [convertedToLeadId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProspectStatus {
  New
  Contacted
  Qualified
  Converted
  Unqualified
}

model CampaignDocument {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId         String   @db.ObjectId
  name               String // Original filename
  type               String // pdf, docx, txt, etc.
  category           String // script, training, reference, etc.
  description        String? // Optional description
  fileUrl            String // URL to stored file (Cloudinary/S3)
  fileSize           Int // Size in bytes
  mimeType           String // application/pdf, text/plain, etc.
  cloudinaryPublicId String?
  campaign           Campaign @relation(fields: [campaignId], references: [id])
  uploadedBy         String   @db.ObjectId
  uploader           User     @relation("UploadedDocuments", fields: [uploadedBy], references: [id])
  createdAt          DateTime @default(now())
}

model Training {
  id                        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String       @db.ObjectId
  user                      User         @relation(fields: [userId], references: [id])
  type                      TrainingType @default(CALLS)
  rapportBuilt              Boolean?
  objectionHandled          Boolean?
  bookedMeeting             Boolean?
  valuePropositionDelivered Boolean?
  // individual scores
  introQualityScore         String?
  discoveryScore            String?
  rapportScore              String?
  objectionScore            String?
  closingScore              String?
  closingCoach              String?
  overallScore              String?
  numericalGrade            Float?

  scenario          String?
  recordingUrl      String?
  transcript        String?
  transcriptSummary String?
  improvements      String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  reviews           CallReview[]
}

model TrainingSession {
  id                        String       @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String       @db.ObjectId
  user                      User         @relation(fields: [userId], references: [id])
  type                      TrainingType @default(CALLS)
  rapportBuilt              Boolean?
  objectionHandled          Boolean?
  bookedMeeting             Boolean?
  valuePropositionDelivered Boolean?
  // individual scores
  introQualityScore         String?
  discoveryScore            String?
  rapportScore              String?
  objectionScore            String?
  closingScore              String?
  closingCoach              String?
  overallScore              Int?
  overallGradeScore         String?
  numericalGrade            Float?

  scenario          String?
  recordingUrl      String?
  transcript        String?
  transcriptSummary String?
  improvements      String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  reviews           CallReview[]

  campaignTraining   CampaignTraining? @relation(fields: [campaignTrainingId], references: [id])
  campaignTrainingId String?           @db.ObjectId
}

model CallReview {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  reviewer   User   @relation(fields: [reviewerId], references: [id])
  reviewerId String @db.ObjectId

  // Optional training session relationship
  trainingSession   TrainingSession? @relation(fields: [trainingSessionId], references: [id])
  trainingSessionId String?          @db.ObjectId

  // Optional call relationships
  call          Call?        @relation(fields: [callId], references: [id])
  callId        String?      @db.ObjectId
  callSession   CallSession? @relation(fields: [callSessionId], references: [id])
  callSessionId String?      @db.ObjectId

  rating     Int? // 1-5 stars
  feedback   String? // Manager comments
  approved   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  training   Training? @relation(fields: [trainingId], references: [id])
  trainingId String?   @db.ObjectId
}

enum NotificationStatus {
  pending
  read
  snooze
}

enum TrainingType {
  CALLS
  REVIEW
}

enum ActivityType {
  CALL
  VOICEMAIL
  SMS
  EMAIL
  NOTE
  MEETING
  FOLLOW_UP
  ASSIGNMENT
  UNASSIGNMENT
  MISSED_CALL
  OUTBOUND_CALL
  CONTACT_ATTEMPTS
  CONTACTED
  FOLLOW_UP_COMPLETED
  EMAIL_SENT
}

enum CallOutcome {
  ANSWERED
  VOICEMAIL
  BUSY
  NO_ANSWER
  DISCONNECTED
  INVALID_NUMBER
  DO_NOT_CALL
  NOT_INTERESTED
  INTERESTED
  MEETING_SCHEDULED
  CALLBACK
}

enum LeadStatus {
  New
  Contacted
  Qualified
  Proposal
  Lost
  Won
  MEETING_SCHEDULED
}

enum RoleType {
  Admin
  Manager
  Agent
  TeamAdmin
  OrgAdmin
  OrgManager
  SuperAdmin
}

enum Status {
  Draft
  Active
  Paused
  Completed
  Cancelled
}

enum AssignmentStrategy {
  ROUND_ROBIN
  LEAST_LOADED
  ROLE_BASED
  MANUAL
}

model CallFlowConfiguration {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  organization Organization?     @relation(fields: [orgId], references: [id])
  orgId        String?           @unique @db.ObjectId
  tier         SubscriptionTier? @default(STARTER)

  // === RECORDING SETTINGS ===
  recordingEnabled        Boolean @default(true)
  minDurationForRecording Int     @default(120) // seconds - only record calls longer than this
  recordInboundCalls      Boolean @default(true)
  recordOutboundCalls     Boolean @default(true)

  // === TRANSCRIPTION SETTINGS ===
  transcribeInbound  Boolean @default(true)
  transcribeOutbound Boolean @default(true)

  // === AI SETTINGS ===
  aiCallGrading  Boolean @default(true)
  aiLeadResearch Boolean @default(true)

  // === INBOUND CALL FLOW SETTINGS ===
  inboundFlow      String  @default("voicemail") // "voicemail" | "forward" | "ivr" | "custom"
  voicemailMessage String? @default("")
  forwardToNumber  String?

  // === FLOW ENGINE SETTINGS ===
  flowSteps Json?

  // === CONDITIONAL LOGIC ===
  enableFlowLogging Boolean @default(true)

  // === ADVANCED FEATURES (future) ===
  customFlowRules  Json? // For complex branching logic
  webhookEndpoints Json? // Custom webhook integrations

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  executions FlowExecution[] // Track flow runs

  @@map("call_flow_configurations")
}

model TierTemplate {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  tier   SubscriptionTier @unique @default(STARTER) // "STARTER", "GROWTH", "PRO"
  config Json // Stores the default CallFlowConfiguration fields

  @@map("tier_templates")
}

model FlowExecution {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  orgId         String   @db.ObjectId
  callSid       String
  configId      String   @db.ObjectId // Reference to the config used
  stepId        String
  stepResult    Json
  executedAt    DateTime @default(now())
  success       Boolean  @default(true)
  errorMessage  String?
  executionTime Int? // milliseconds

  configuration CallFlowConfiguration @relation(fields: [configId], references: [id])

  @@map("flow_executions")
}

enum SubscriptionTier {
  STARTER
  PRO
  ENTERPRISE
  GROWTH
}

enum DFYTier {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}
